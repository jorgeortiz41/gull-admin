{"ast":null,"code":"const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener(\"load\", () => resolve(image));\n  image.addEventListener(\"error\", error => reject(error));\n  image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n\n  canvas.width = safeArea;\n  canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image with correct offsets for x,y crop values.\n\n  ctx.putImageData(data, 0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x, 0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y); // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n\n  return canvas;\n}","map":{"version":3,"sources":["C:/Users/jorti/OneDrive/Desktop/REU/gull-admin/react/src/app/views/extra-kits/ImageCropper/cropImage.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","x","y"],"mappings":"AAAA,MAAMA,WAAW,GAAIC,GAAD,IAClB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,MAAMJ,OAAO,CAACE,KAAD,CAA5C;AACAA,EAAAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,EAAiCC,KAAD,IAAWJ,MAAM,CAACI,KAAD,CAAjD;AACAH,EAAAA,KAAK,CAACI,YAAN,CAAmB,aAAnB,EAAkC,WAAlC,EAJ+B,CAIiB;;AAChDJ,EAAAA,KAAK,CAACK,GAAN,GAAYT,GAAZ;AACD,CAND,CADF;;AASA,SAASU,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAQA,WAAW,GAAGC,IAAI,CAACC,EAApB,GAA0B,GAAjC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,eAAeC,aAAf,CAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,QAAQ,GAAG,CAA7D,EAAgE;AAC7E,QAAMb,KAAK,GAAG,MAAML,WAAW,CAACgB,QAAD,CAA/B;AACA,QAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAMC,OAAO,GAAGX,IAAI,CAACY,GAAL,CAASpB,KAAK,CAACqB,KAAf,EAAsBrB,KAAK,CAACsB,MAA5B,CAAhB;AACA,QAAMC,QAAQ,GAAG,KAAMJ,OAAO,GAAG,CAAX,GAAgBX,IAAI,CAACgB,IAAL,CAAU,CAAV,CAArB,CAAjB,CAN6E,CAQ7E;AACA;;AACAV,EAAAA,MAAM,CAACO,KAAP,GAAeE,QAAf;AACAT,EAAAA,MAAM,CAACQ,MAAP,GAAgBC,QAAhB,CAX6E,CAa7E;;AACAN,EAAAA,GAAG,CAACQ,SAAJ,CAAcF,QAAQ,GAAG,CAAzB,EAA4BA,QAAQ,GAAG,CAAvC;AACAN,EAAAA,GAAG,CAACS,MAAJ,CAAWpB,cAAc,CAACO,QAAD,CAAzB;AACAI,EAAAA,GAAG,CAACQ,SAAJ,CAAc,CAACF,QAAD,GAAY,CAA1B,EAA6B,CAACA,QAAD,GAAY,CAAzC,EAhB6E,CAkB7E;;AACAN,EAAAA,GAAG,CAACU,SAAJ,CACE3B,KADF,EAEEuB,QAAQ,GAAG,CAAX,GAAevB,KAAK,CAACqB,KAAN,GAAc,GAF/B,EAGEE,QAAQ,GAAG,CAAX,GAAevB,KAAK,CAACsB,MAAN,GAAe,GAHhC;AAMA,QAAMM,IAAI,GAAGX,GAAG,CAACY,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBN,QAAvB,EAAiCA,QAAjC,CAAb,CAzB6E,CA2B7E;;AACAT,EAAAA,MAAM,CAACO,KAAP,GAAeT,SAAS,CAACS,KAAzB;AACAP,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,SAAS,CAACU,MAA1B,CA7B6E,CA+B7E;;AACAL,EAAAA,GAAG,CAACa,YAAJ,CACEF,IADF,EAEE,IAAIL,QAAQ,GAAG,CAAf,GAAmBvB,KAAK,CAACqB,KAAN,GAAc,GAAjC,GAAuCT,SAAS,CAACmB,CAFnD,EAGE,IAAIR,QAAQ,GAAG,CAAf,GAAmBvB,KAAK,CAACsB,MAAN,GAAe,GAAlC,GAAwCV,SAAS,CAACoB,CAHpD,EAhC6E,CAsC7E;AACA;;AACA,SAAOlB,MAAP;AACD","sourcesContent":["const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180;\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  );\n\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y\n  );\n\n  // As Base64 string\n  // return canvas.toDataURL(\"image/jpeg\");\n  return canvas;\n}\n"]},"metadata":{},"sourceType":"module"}